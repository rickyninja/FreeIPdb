-- #                _____              ___ ____     _ _
-- #               |  ___| __ ___  ___|_ _|  _ \ __| | |__
-- #               | |_ | '__/ _ \/ _ \| || |_) / _` | '_ \
-- #               |  _|| | |  __/  __/| ||  __/ (_| | |_) |
-- #               |_|  |_|  \___|\___|___|_|   \__,_|_.__/
-- #
-- #	Rwhois.sql-$Name:  $-$Revision: 1.1 $ $Date: 2003/11/07 12:23:59 $ <$Author: ben $@freeipdb.org>
-- ######################################################################;

CREATE TABLE WHOIS_BLOCK_TABLE (
	BLOCK		INT	UNIQUE,	-- IPDB ID
	NETNAME		VARCHAR(21),	-- per RFC
	ORG		INT,		-- ORG ID
	TECH		INT,		-- CONTACT ID
	ADMIN		INT		-- CONTACT ID
);
GRANT ALL ON WHOIS_BLOCK_TABLE TO freeipdb;
GRANT ALL ON WHOIS_BLOCK_TABLE_BLOCK_KEY TO freeipdb;


CREATE TABLE WHOIS_BLOCK_TABLE_DATE (
	BLOCK		INT	UNIQUE,
	CREATE		INT,		-- Timestamp
	UPDATE		INT		-- Timestamp
);
GRANT ALL ON WHOIS_BLOCK_TABLE_DATE TO freeipdb;
GRANT ALL ON WHOIS_BLOCK_TABLE_DATE_BLOCK_SE TO freeipdb;


CREATE TABLE WHOIS_ORG_TABLE (
	ID 		SERIAL,
	NAME		VARCHAR(60),
	ADDRESS		VARCHAR(60),
	CITY		VARCHAR(30),
	STATE		VARCHAR(2),
	POST		VARCHAR(8),
	COUNTRY		VARCHAR(2),
	PHONE		VARCHAR(30)
);
GRANT ALL ON WHOIS_ORG_TABLE TO freeipdb;
GRANT ALL ON WHOIS_ORG_TABLE_ID_SEQ TO freeipdb;

CREATE TABLE WHOIS_ORG_TABLE_DATE (
	ID		INT	UNIQUE,
	CREATE		INT,		-- Timestamp
	UPDATE		INT		-- Timestamp
);

GRANT ALL ON WHOIS_ORG_TABLE_DATE TO freeipdb;
GRANT ALL ON WHOIS_ORG_TABLE_DATE_ID_KEY TO freeipdb;

CREATE TABLE WHOIS_CONTACT_TABLE (
	ID		SERIAL,
	ORG		INT,
	NAME		VARCHAR(60),
	EMAIL		VARCHAR(60),
	TYPE		VARCHAR(1),
	FIRST		VARCHAR(30),
	LAST		VARCHAR(30),
	PHONE		VARCHAR(30),
	FAX		VARCHAR(30),
	SEE_ALSO	VARCHAR(30)
);

GRANT ALL ON WHOIS_CONTACT_TABLE TO freeipdb;
GRANT ALL ON WHOIS_CONTACT_TABLE_ID_SEQ TO freeipdb;

CREATE TABLE WHOIS_CONTACT_TABLE_DATE (
	ID		INT	UNIQUE,
	CREATE		INT,		-- Timestamp
	UPDATE		INT		-- Timestamp
);

GRANT ALL ON WHOIS_CONTACT_TABLE_DATE TO freeipdb;
GRANT ALL ON WHOIS_CONTACT_TABLE_DATE_ID_SEQ TO freeipdb;

DROP FUNCTION ARIN_DATESTAMP(DATE);
CREATE FUNCTION ARIN_DATESTAMP(DATE) RETURNS INT4 AS '
	DECLARE
		one alias for $1;
		string  varchar;
		year	varchar;
		month	varchar;
		day	varchar;
		out 	varchar;
		string_replaced	varchar;
	BEGIN
		string := one;
		year := substr(string,0,5);
		month := substr(string,0,2);
		day := substr(string,0,2);
		string_replaced := year || month || day;
		return string_replaced;
	END;'
	LANGUAGE 'plpgsql';

DROP FUNCTION WHOIS_BLOCK_UID();
CREATE FUNCTION WHOIS_BLOCK_UID() RETURNS OPAQUE AS '
	BEGIN
		if TG_OP = ''INSERT''
		THEN
			INSERT INTO WHOIS_BLOCK_TABLE_DATE 
				(BLOCK,CREATE,UPDATE) VALUES (new.block,ARIN_DATESTAMP(CURRENT_DATE),ARIN_DATESTAMP(CURRENT_DATE));
		ELSE 
			IF TG_OP = ''DELETE''
			THEN
				DELETE FROM WHOIS_BLOCK_TABLE_DATE WHERE BLOCK = old.block;
			ELSE
				UPDATE WHOIS_BLOCK_TABLE_DATE SET UPDATE = ARIN_DATESTAMP(CURRENT_DATE)  WHERE BLOCK = new.block;
			END IF;
		END IF;
		RETURN new;
	END;'
	LANGUAGE 'plpgsql';

DROP FUNCTION WHOIS_CONTACT_TABLE_UID();
CREATE FUNCTION WHOIS_CONTACT_TABLE_UID() RETURNS OPAQUE AS '
	DECLARE
		datestamp  int;
	BEGIN
		datestamp := ARIN_DATESTAMP(CURRENT_DATE);
		IF TG_OP = ''INSERT''
		THEN
			INSERT INTO WHOIS_CONTACT_TABLE_DATE
				(ID,CREATE,UPDATE) VALUES (new.id,datestamp,datestamp);
		ELSE
			IF TG_OP = ''DELETE''
			THEN
				DELETE FROM WHOIS_CONTACT_TABLE_DATE WHERE ID = old.id;
			ELSE 
				UPDATE WHOIS_CONTACT_TABLE_DATE SET UPDATE = datestamp WHERE ID = new.id;
			END IF;
		END IF;
	RETURN new;
	END;'
	LANGUAGE 'plpgsql';

DROP FUNCTION WHOIS_ORG_TABLE_UID();
CREATE FUNCTION WHOIS_ORG_TABLE_UID() RETURNS OPAQUE AS '
	DECLARE
		datestamp  int;
	BEGIN
		datestamp := ARIN_DATESTAMP(CURRENT_DATE);
		IF TG_OP = ''INSERT''
		THEN
			INSERT INTO WHOIS_ORG_TABLE_DATE
				(ID,CREATE,UPDATE) VALUES (new.id,datestamp,datestamp);
		ELSE
			IF TG_OP = ''DELETE''
			THEN
				DELETE FROM WHOIS_ORG_TABLE_DATE WHERE ID = old.id;
			ELSE 
				UPDATE WHOIS_ORG_TABLE_DATE SET UPDATE = datestamp WHERE ID = new.id;
			END IF;
		END IF;
	RETURN new;
	END;'
	LANGUAGE 'plpgsql';

DROP TRIGGER trigger_whois_block_UID ON WHOIS_BLOCK_TABLE;
CREATE TRIGGER trigger_whois_block_UID
AFTER INSERT OR UPDATE OR DELETE
ON WHOIS_BLOCK_TABLE
FOR EACH ROW
EXECUTE PROCEDURE WHOIS_BLOCK_UID();

DROP TRIGGER TRIGGER_WHOIS_CONTACT_TABLE_UID ON WHOIS_CONTACT_TABLE;
CREATE TRIGGER TRIGGER_WHOIS_CONTACT_TABLE_UID
AFTER UPDATE OR INSERT OR DELETE
ON WHOIS_CONTACT_TABLE
FOR EACH ROW
EXECUTE PROCEDURE WHOIS_CONTACT_TABLE_UID();

DROP TRIGGER TRIGGER_WHOIS_ORG_TABLE_UID ON WHOIS_ORG_TABLE;
CREATE TRIGGER TRIGGER_WHOIS_ORG_TABLE_UID
AFTER UPDATE OR INSERT OR DELETE
ON WHOIS_ORG_TABLE
FOR EACH ROW
EXECUTE PROCEDURE WHOIS_ORG_TABLE_UID();
